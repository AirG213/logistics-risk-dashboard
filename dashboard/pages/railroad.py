import streamlit as st
import base64
import pandas as pd
import base64
from utils import load_csv, apply_responsive
import plotly.express as px
from sidebar import show_sidebar

show_sidebar()

def show_tab1(df):
    # Bloc 1 ‚Äî R√©partition par Type d'Accident
    st.subheader("R√©partition par Type d'Accident")
    type_counts = df["Accident Type"].value_counts().reset_index()
    type_counts.columns = ["Type d'Accident", "Nombre d'incidents"]
    fig_type = px.bar(
        type_counts,
        x="Type d'Accident",
        y="Nombre d'incidents",
        color="Type d'Accident",
        title="Nombre d'incidents par type",
        color_discrete_sequence=px.colors.qualitative.Set3,
        labels={"Type d'Accident": "Type d'accident", "Nombre d'incidents": "Nombre d'incidents"}
    )
    st.plotly_chart(apply_responsive(fig_type), use_container_width=True)
    with st.expander("‚ÑπÔ∏è Comment lire ce graphique ?"):
        st.markdown("""
        Ce graphique montre combien d'incidents ont √©t√© enregistr√©s pour chaque **type d'accident ferroviaire**.  
        Il permet d'identifier les types les plus fr√©quents (ex. : **D√©raillement**, **Collision**, etc.).
        """)
    st.markdown("---")

    # Bloc 2 ‚Äî Moyennes des Variables par Type d'Accident
    st.markdown("### Moyennes des Indicateurs par Type d'Accident")
    st.markdown("**Comparaison des indicateurs selon le type d'accident**")
    variable_map = {
        "Total Damage Cost": "Co√ªt Total des D√©g√¢ts",
        "Total Persons Killed": "Nombre de Morts",
        "Total Persons Injured": "Nombre de Bless√©s",
        "Hazmat Cars": "Wagons de mati√®res dangereuses",
        "Hazmat Cars Damaged": "Wagons dangereux endommag√©s",
        "Persons Evacuated": "Personnes √âvacu√©es"
    }
    variables = list(variable_map.keys())
    selected_vars = st.multiselect(
        "Variables √† afficher :",
        options=variables,
        format_func=lambda x: variable_map.get(x, x),
        default=["Total Damage Cost"]
    )
    if selected_vars:
        df_avg = df.groupby("Accident Type")[selected_vars].mean().reset_index()
        for var in selected_vars:
            st.markdown(f"#### {variable_map[var]}")
            sorted_df = df_avg.sort_values(var, ascending=False)
            fig = px.bar(
                sorted_df,
                x=var,
                y="Accident Type",
                orientation="h",
                height=400,
                color_discrete_sequence=["#2ecc71"],
                labels={
                    var: variable_map[var],
                    "Accident Type": "Type d'accident"
                }
            )
            st.plotly_chart(apply_responsive(fig), use_container_width=True)

            with st.expander("‚ÑπÔ∏è Interpr√©tation du graphique"):
                st.markdown(f"""
                Ce graphique montre la **moyenne de {variable_map[var]}** par type d'accident.  
                Il permet d'√©valuer **l'impact moyen** de chaque type d'incident sur cette variable.
                """)
    else:
        st.info("Veuillez s√©lectionner au moins une variable.")

    st.markdown("---")

    # Bloc 3 ‚Äî Niveau de Criticit√© Global
    st.subheader("Niveau de Criticit√© Global")
    crit_counts = df["Niveau_criticit√©"].value_counts().reset_index()
    crit_counts.columns = ["Niveau de Criticit√©", "Nombre"]
    fig_crit = px.pie(
        crit_counts,
        names="Niveau de Criticit√©",
        values="Nombre",
        title="R√©partition du niveau de criticit√©",
        color="Niveau de Criticit√©",
        color_discrete_map={"Low": "green", "Medium": "orange", "High": "red"}
    )
    st.plotly_chart(apply_responsive(fig_crit), use_container_width=True)
    with st.expander("‚ÑπÔ∏è Que montre ce graphique ?"):
        st.markdown("""
        Cette r√©partition montre la **proportion d'incidents class√©s selon leur niveau de criticit√©**  
        (bas√© sur leur gravit√©, impact, dangerosit√©...).
        """)

    st.markdown("---")

    # Bloc 4 ‚Äî Carte des Incidents
    st.subheader("Carte des Incidents Ferroviaires")
    df_map = df.dropna(subset=["Latitude", "Longitude"])
    df_map = df_map[
        (df_map["Latitude"].between(24.5, 49.5)) &
        (df_map["Longitude"].between(-125, -66))
    ]
    fig_map = px.scatter_map(
        df_map,
        lat="Latitude",
        lon="Longitude",
        color="Niveau_criticit√©",
        zoom=3,
        height=600,
        map_style="carto-positron",
        color_discrete_map={
            "Low": "#2ecc71",
            "Medium": "#f1c40f",
            "High": "#e74c3c"
        },
        hover_data={
            "State Name": True,
            "County Name": True,
            "Accident Type": True,
            "Total Damage Cost": True,
            "Total Persons Killed": True
        },
        labels={
            "State Name": "√âtat",
            "County Name": "Comt√©",
            "Accident Type": "Type d'Accident",
            "Total Damage Cost": "Co√ªt des D√©g√¢ts",
            "Total Persons Killed": "Personnes D√©c√©d√©es"
        }
    )
    fig_map.update_layout(
        margin={"r":0, "t":0, "l":0, "b":0},
        mapbox_center={"lat": 37.5, "lon": -95},
        mapbox_zoom=3.2
    )
    st.plotly_chart(apply_responsive(fig_map), use_container_width=True)

    st.markdown("---")

    # Bloc 5 ‚Äî Comt√©s les plus et les moins touch√©s
    st.subheader("Comt√©s les Plus et Moins Touch√©s")
    county_counts = df["County Name"].value_counts().reset_index()
    county_counts.columns = ["Comt√©", "Nombre d'incidents"]
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**Top 10 ‚Äî Comt√©s les Plus Touch√©s**")
        st.dataframe(county_counts.head(10), use_container_width=True)
    with col2:
        st.markdown("**Top 10 ‚Äî Comt√©s les Moins Touch√©s (‚â•1 incident)**")
        st.dataframe(county_counts[county_counts["Nombre d'incidents"] > 0].tail(10), use_container_width=True)
    with st.expander("üìç Que montre ce classement ?"):
        st.markdown("""
        Ces tableaux listent les **comt√©s les plus expos√©s aux incidents ferroviaires** (en nombre brut).  
        Cela permet d‚Äôidentifier les **zones g√©ographiques sensibles**.
        """)


def show_tab2(df):
    st.subheader("√âvolution des Incidents Ferroviaires sur les 20 Derni√®res Ann√©es")

    # Bloc 1 ‚Äî Incidents par Ann√©e
    incidents_by_year = df["Report Year"].value_counts().sort_index()
    fig_years = px.bar(
        x=incidents_by_year.index,
        y=incidents_by_year.values,
        labels={"x": "Ann√©e", "y": "Nombre d'incidents"},
        title="Nombre d'incidents par ann√©e"
    )
    st.plotly_chart(fig_years, use_container_width=True)

    with st.expander("üìä Que montre ce graphique ?"):
        st.markdown("""
        Ce graphique pr√©sente le **nombre total d'incidents enregistr√©s chaque ann√©e**.  
        Il permet d‚Äôidentifier les ann√©es avec une augmentation ou diminution des accidents ferroviaires.
        """)

    st.markdown("---")

    # Bloc 2 ‚Äî Types d'Accidents au Fil du Temps
    st.subheader("Types d'Accidents au Fil du Temps")
    type_year = df.groupby(["Report Year", "Accident Type"]).size().unstack(fill_value=0)
    fig_type = px.area(
        type_year,
        labels={"value": "Nombre d'incidents", "Report Year": "Ann√©e", "variable": "Type d'accident"},
        title="√âvolution des types d'accidents"
    )
    st.plotly_chart(fig_type, use_container_width=True)

    with st.expander("üìà Interpr√©tation de l'√©volution des types d'accidents"):
        st.markdown("""
        Ce graphique **empil√©** permet de visualiser comment la **r√©partition des types d'accidents**  
        a √©volu√© au fil des ann√©es.  
        Il met en √©vidence les types dominants √† chaque √©poque.
        """)

    st.markdown("---")

    # Bloc 3 ‚Äî Risque Composite Moyen par Ann√©e
    st.subheader("√âvolution du Risque Composite Moyen")
    risk_by_year = df.groupby("Report Year")["Risque_composite"].mean()
    fig_risk = px.line(
        x=risk_by_year.index,
        y=risk_by_year.values,
        markers=True,
        labels={"x": "Ann√©e", "y": "Risque Composite Moyen"},
        title="Risque moyen par ann√©e"
    )
    st.plotly_chart(fig_risk, use_container_width=True)

    with st.expander("üìâ Que repr√©sente ce risque composite ?"):
        st.markdown("""
        Ce graphique montre la **moyenne annuelle du score de risque composite**,  
        qui agr√®ge plusieurs indicateurs de dangerosit√© (co√ªt, gravit√©, victimes‚Ä¶).  
        Une tendance haussi√®re peut indiquer des incidents plus graves.
        """)

    st.markdown("---")

    # Bloc 4 ‚Äî Moment de la Journ√©e
    st.subheader("R√©partition des Incidents par Moment de la Journ√©e")

    ordre_fr = ["T√¥t le matin", "Fin de matin√©e", "Apr√®s-midi", "Soir√©e"]

    fig_time = px.histogram(
        df,
        x="TimeOfDay",
        color="Niveau_criticit√©",
        barmode="group",
        category_orders={"TimeOfDay": ordre_fr},
        color_discrete_map={
            "Low": "#2ecc71",
            "Medium": "#f39c12",
            "High": "#e74c3c"
        },
        labels={
            "TimeOfDay": "Moment de la Journ√©e",
            "count": "Nombre d'incidents",
            "Niveau_criticit√©": "Criticit√©"
        },
        title="Incidents par moment de la journ√©e"
    )
    st.plotly_chart(apply_responsive(fig_time), use_container_width=True)

    with st.expander("üïì Explication des moments de la journ√©e"):
        st.markdown("""
        Ce graphique montre comment se r√©partissent les incidents ferroviaires selon le **moment de la journ√©e** :  
        - **T√¥t le matin**  
        - **Fin de matin√©e**  
        - **Apr√®s-midi**  
        - **Soir√©e**  

        Les couleurs indiquent le **niveau de criticit√©** de chaque incident.
        """)


def show_tab3(df):
    st.subheader("Analyse de Corr√©lation ‚Äî Variables d'Impact")
    general_cols = [
        "Total Damage Cost", "Total Persons Killed", "Total Persons Injured",
        "Hazmat Cars", "Hazmat Cars Damaged", "Persons Evacuated", "Risque_composite"
    ]
    # Mapping des labels pour affichage FR
    label_map = {
        "Total Damage Cost": "Co√ªt Mat√©riel Total",
        "Total Persons Killed": "Nombre de Morts",
        "Total Persons Injured": "Nombre de Bless√©s",
        "Hazmat Cars": "Wagons de Mati√®res Dangereuses",
        "Hazmat Cars Damaged": "Wagons de Mati√®res Dangereuses Endommag√©s",
        "Persons Evacuated": "Personnes √âvacu√©es",
        "Risque_composite": "Risque Composite"
    }
    # Corr√©lation g√©n√©rale
    st.markdown("### Corr√©lation G√©n√©rale")
    corr_general = df[general_cols].corr()
    corr_general.index = corr_general.index.to_series().replace(label_map)
    corr_general.columns = corr_general.columns.to_series().replace(label_map)
    fig1 = px.imshow(
        corr_general,
        text_auto=True,
        color_continuous_scale="RdBu_r",
        aspect="auto",
        labels=dict(color="Corr√©lation")
    )
    fig1.update_layout(width=900, height=600, margin=dict(l=50, r=50, t=50, b=50))
    st.plotly_chart(fig1, use_container_width=True)
    with st.expander("üìò Comment lire cette matrice ?"):
        st.markdown("""
        Cette matrice montre la **corr√©lation lin√©aire** entre les variables g√©n√©rales.  
        - Une valeur proche de **1** (rouge fonc√©) indique une **forte corr√©lation positive** (les deux variables augmentent ensemble).  
        - Une valeur proche de **-1** (bleu fonc√©) indique une **forte corr√©lation n√©gative** (l'une augmente quand l'autre diminue).  
        - Une valeur proche de **0** signifie **aucune corr√©lation lin√©aire**.
        """)

    st.markdown("---")

    # Corr√©lation Hazmat
    st.markdown("### Corr√©lation Mati√®res Dangereuses & Risque")
    hazmat_cols = [
        "Hazmat Cars", "Hazmat Cars Damaged", "Persons Evacuated", "Risque_composite"
    ]
    corr_hazmat = df[hazmat_cols].corr()
    corr_hazmat.index = corr_hazmat.index.to_series().replace(label_map)
    corr_hazmat.columns = corr_hazmat.columns.to_series().replace(label_map)
    fig2 = px.imshow(
        corr_hazmat,
        text_auto=True,
        color_continuous_scale="YlGnBu",
        aspect="auto",
        labels=dict(color="Corr√©lation")
    )
    fig2.update_layout(width=800, height=500, margin=dict(l=50, r=50, t=50, b=50))
    st.plotly_chart(fig2, use_container_width=True)
    with st.expander("üìò Comment lire cette matrice ?"):
        st.markdown("""
        Cette matrice explore les **corr√©lations entre les variables li√©es aux mati√®res dangereuses et le risque composite** :  
        - **Wagons de Mati√®res Dangereuses** : nombre total impliqu√©.  
        - **Endommag√©s** : ceux ayant subi un dommage.  
        - **Personnes √âvacu√©es** : cons√©quence directe d‚Äôun danger.  
        Regardez les zones fonc√©es pour d√©tecter les corr√©lations fortes entre ces variables.
        """)


def show():
    # Charger l'ic√¥ne et encoder en base64
    with open("assets/railroad_icon.png", "rb") as f:
        icon_base64 = base64.b64encode(f.read()).decode()

    # Titre + Ic√¥ne align√©s
    st.markdown(
        f"""
        <div style="display: flex; align-items: center;">
            <img src="data:image/png;base64,{icon_base64}" alt="Icone" style="width:60px; margin-right: 10px;">
            <h1 style="margin: 0;">Analyse de Risque ‚Äî Transport Ferroviaire</h1>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown("""
    ### Contexte et Source des Donn√©es
    Ce module repose sur le dataset **[Railroad Accident/Incident Data - Kaggle](https://www.kaggle.com/datasets/chrico03/railroad-accident-and-incident-data)** :
    - **Domaine :** Transport ferroviaire am√©ricain
    - **Format :** CSV (nettoy√©)
    - **Description :** Plus de 60 000 rapports d'incidents (d√©raillements, collisions, feux, etc.), incluant type d'accident, √©tat, nombre de personnes concern√©es, dur√©e, dommages, et coordonn√©es g√©ographiques.
    - **Pourquoi ce choix ?** : Permet de d√©tecter les zones ferroviaires critiques et d'analyser les types d'incidents impactant la cha√Æne logistique lourde.

    **P√©rim√®tre de l'√©tude :**
    - L'analyse couvre uniquement les **20 derni√®res ann√©es** (2002-2022) sur la base de la colonne `Report Year`
    - Les enregistrements ant√©rieurs (jusqu'√† 1975) ont √©t√© **exclus** de l'√©tude

    **Le `Risque_composite`** est un indicateur calcul√© √† partir de :
    - la fr√©quence de l'incident
    - la gravit√© de ses cons√©quences (victimes, d√©g√¢ts)
    - le niveau d'√©vacuation ou impact Hazmat

    > Les valeurs sont normalis√©es pour aboutir √† un `Niveau_criticit√©` qualitatif : Faible / Moyen / √âlev√©.
    """)

    # Charger les donn√©es nettoy√©es
    df = load_csv("../data/cleaned/railroad_accident_cleaned.csv")

    # Nettoyage des noms de colonnes (strip des espaces invisibles s'il y en a)
    df.columns = df.columns.str.strip()

    # Cr√©er une colonne Date compl√®te √† partir des 3 colonnes s√©par√©es
    df["Accident_Date"] = pd.to_datetime({
        "year": df["Report Year"],
        "month": df["Accident Month"],
        "day": df["Day"]
    }, errors="coerce")

    # Aper√ßu dans un expander
    with st.expander("Voir un aper√ßu du dataset (1000 lignes)"):
        st.dataframe(df.head(1000))

    # KPI globaux
    st.markdown("### Indicateurs Cl√©s Globaux")

    total_incidents = df.shape[0]
    total_killed = df["Total Persons Killed"].sum()
    total_injured = df["Total Persons Injured"].sum()
    total_damage = df["Total Damage Cost"].sum()
    avg_damage = df["Total Damage Cost"].mean()
    max_damage_state = df.groupby("State Name")["Total Damage Cost"].sum().idxmax()
    top_state = df["State Name"].value_counts().idxmax()

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Incidents Totaux", f"{total_incidents:,}")
    col2.metric("Personnes Tu√©es", f"{total_killed:,}")
    col3.metric("Personnes Bless√©es", f"{total_injured:,}")
    col4.metric("√âtat + Touch√© ($)", max_damage_state)

    col1.metric("Dommages Totaux", f"${total_damage:,.0f}")
    col2.metric("Dommage Moyen", f"${avg_damage:,.0f}")
    col3.metric("Plage Temporelle", f"{df["Report Year"].min().astype(int)} - {df["Report Year"].max().astype(int)}")

    tab1, tab2, tab3 = st.tabs(["Vue Globale", "Analyses Temporelle", "Heatmap"])

    with tab1:
        show_tab1(df)

    with tab2:
        show_tab2(df)

    with tab3:
        show_tab3(df)

    st.markdown("---")

    # R√©sum√©
    st.info(f"""
    **R√©sum√© G√©n√©ral des Incidents Ferroviaires :**

    - **Nombre total d'incidents :** {total_incidents:,}
    - **Total de personnes tu√©es :** {total_killed:,}
    - **Total de personnes bless√©es :** {total_injured:,}
    - **Co√ªt total des dommages :** ${total_damage:,.0f}
    - **√âtat le plus touch√© :** {top_state}
    -> Dommages cumul√©s : ${df[df['State Name'] == top_state]['Total Damage Cost'].sum():,.0f}
    - **Co√ªt moyen par incident :** ${avg_damage:,.0f}
    - **Ann√©e la plus critique :** {df['Report Year'].mode()[0]}
    -> Nombre d'incidents : {df['Report Year'].value_counts().max()}
    - **Risque composite moyen :** {df['Risque_composite'].mean():.2e}
    -> (Score faible car bas√© sur 210M trajets)
    - **Niveau de criticit√© dominant :** {df['Niveau_criticit√©'].mode()[0]}
    """)

show()
